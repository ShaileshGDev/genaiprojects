trigger:
  branches:
    include:
      - main  # Adjust to your main branch name

pool:
  vmImage: 'ubuntu-latest'  # Using an Ubuntu build agent

variables:
  composeFile: 'docker-compose.yml'


jobs:
- job: BuildAndDeploy
  displayName: 'Build and Deploy FastAPI with Nginx'
  steps:
  # Checkout code from the repository
  - checkout: self
    displayName: 'Checkout Repository'

  # Copy application files to the Linux server
  - task: CopyFilesOverSSH@0
    displayName: 'Copy Docker Files to Server'
    inputs:
      sshEndpoint: 'myserviceconnection'  # Set up SSH in Azure DevOps
      sourceFolder: '$(Build.SourcesDirectory)'
      targetFolder: $(APP_PATH)

  - script: |
      mkdir -p ~/.ssh
      echo "$(SSH_PRIVATE_KEY)" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      ssh-keyscan -H $(SSH_REMOTE_IP) >> ~/.ssh/known_hosts
    displayName: 'Setup SSH Key'

  - task: SSH@0
    inputs:
      sshEndpoint: 'myserviceconnection'
      runOptions: 'inline'
      inline: |
        rm -rf $(VENV_PATH)
        python3 -m venv $(VENV_PATH)        
      readyTimeout: '20000'
    displayName: 'Create virtual environment'

  - task: SSH@0
    displayName: 'Stop and Remove My Container If Exists'

    inputs:
      sshEndpoint: 'myserviceconnection'
      runOptions: 'inline'
      inline: |
        # set -e  # Exit if any command fails

        cd $(APP_PATH)

        echo "Checking if container fastapi_app exists..."
        CONTAINER_ID=$(docker ps -aq -f name=fastapi_app)

        if [ -n "$CONTAINER_ID" ]; then
          echo "Stopping and removing container fastapi_app..."
          docker stop fastapi_app || true
          docker rm fastapi_app || true
        else
          echo "Container fastapi_app not found, skipping stop and remove."
        fi

        echo "Checking if image fastapi_app:latest exists..."
        IMAGE_ID=$(docker images -q fastapi_app:latest)

        if [ -n "$IMAGE_ID" ]; then
          echo "Removing old image fastapi_app:latest..."
          docker rmi -f fastapi_app:latest || true
        else
          echo "Image fastapi_app:latest not found, skipping removal."
        fi

        echo "Cleaning up Docker system cache..."
        docker system prune -f || true
        docker volume prune -f || true

        echo "Rebuilding and restarting fastapi_app service..."
        docker-compose build --no-cache
        docker-compose up -d
        failOnStderr: false


  # Clean up unused Docker images to free up space 
  - task: SSH@0
    displayName: 'Docker Prune'
    inputs:
      sshEndpoint: 'myserviceconnection'
      runOptions: 'commands'
      commands: |
        docker system prune -af
      failOnStderr: true
